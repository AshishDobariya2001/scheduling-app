const options = {
  jwtTokenExpiry: '7d',
  emailSenderName: 'Task Scheduler',
  defaultStatus: {
    PENDING: 'pending',
    ACTIVE: 'active',
    INACTIVE: 'inactive',
    COMPLETED: 'completed',
    TERMINATED: 'terminated',
    DELETED: 'deleted',
    getDefaultStatusArray: () => [
      options.defaultStatus.PENDING,
      options.defaultStatus.ACTIVE,
      options.defaultStatus.COMPLETED,
      options.defaultStatus.TERMINATED,
      options.defaultStatus.DELETED,
      options.defaultStatus.INACTIVE,
    ],
  },
  userRoles: {
    USER: 'user',
    getAllRolesAsArray: () => [
      options.userRoles.USER,
    ],
  },
  resCode: {
    HTTP_OK: 200,
    HTTP_CREATE: 201,
    HTTP_NO_CONTENT: 204,
    HTTP_BAD_REQUEST: 400,
    HTTP_UNAUTHORIZED: 401,
    HTTP_FORBIDDEN: 403,
    HTTP_NOT_FOUND: 404,
    HTTP_METHOD_NOT_ALLOWED: 405,
    HTTP_CONFLICT: 409,
    HTTP_INTERNAL_SERVER_ERROR: 500,
    HTTP_SERVICE_UNAVAILABLE: 503,
  },
  contractStatus: {
    NEW: 'new',
    IN_PROGRESS: 'in_progress',
    TERMINATED: 'terminated',
    getAllStatuses: () => [
      options.contractStatus.NEW, 
      options.contractStatus.IN_PROGRESS, 
      options.contractStatus.TERMINATED
    ]
  },
  httpMethods: {
    GET: 'GET',
    POST: 'POST',
    PUT: 'PUT',
    DELETE: 'DELETE',
    PATCH: 'PATCH',
    getAllMethods: () => [
      options.httpMethods.GET,
      options.httpMethods.POST,
      options.httpMethods.PUT,
      options.httpMethods.DELETE,
      options.httpMethods.PATCH,
    ],
  },
  taskStatus: {
    PENDING: 'pending',
    RUNNING: 'running',
    COMPLETED: 'completed',
    FAILED: 'failed',
    CANCELLED: 'cancelled',
    RETRY: 'retry',
    getAllStatuses: () => [
      options.taskStatus.PENDING,
      options.taskStatus.RUNNING,
      options.taskStatus.COMPLETED,
      options.taskStatus.FAILED,
      options.taskStatus.CANCELLED,
      options.taskStatus.RETRY,
    ],
  },
  WAIT_TIMEOUT: process.env.WAIT_TIMEOUT ? parseInt(process.env.WAIT_TIMEOUT, 10) : 10,
  RETRY_OFFSET: process.env.RETRY_OFFSET ? parseInt(process.env.RETRY_OFFSET, 10) : 1,
  MAX_RETRIES: process.env.MAX_RETRIES ? parseInt(process.env.MAX_RETRIES, 10) : 3,
  errorMessage:{
    UNAUTHORIZED_ACCESS: 'Not authorized to perform this action',
    DEVICE_BLOCKED_BY_PARENT:
      'Access denied: This device is blocked by the parent',
    SERVER_ERROR: 'Oops! something went wrong.',
    INVALID_CREDENTIALS: 'The email and/or password entered are incorrect',
    INVALID_PASSWORD: 'The password entered is incorrect',
    OTP_INVALID: 'Invalid Otp',
    CONTACT_ADMIN: 'Contact admin to perform edit',
    COUNTRY_CODE: 'Please add country code',
    INCORRECT_DATA: (data) => `The ${data} entered is incorrect`,
    INVALID_REQUEST: 'Invalid Request',
    USER_ACCOUNT_BLOCKED: 'Your account has been blocked, Please contact admin',
    ROLE_INVALID_LOGIN: 'Account access denied',
    ROLE_INVALID_SIGNUP: (data) => `Signup denied for ${data}`,
    NO_USER: (data) => `User does not exists with this ${data}`,
    EXISTS_USER: (data) => `User exists with ${data}`,
    DOES_NOT_EXIST: (data) => `The ${data} does not exist`,
    ALREADY_EXIST: (data) => `The ${data} already exist`,
    ALREADY_USED: (data) => `The ${data} already used`,
    ALREADY_MARKED_PURCHASED:
      'The vehicle is already marked as purchased for your dealership',
    INCORRECT_FILE_DATA: 'File contains invalid data',
    SAME_EMAIL_MOBILE_EXISTS: (data) => `User with same ${data} already exists`,
    DATA_NOT_FOUND: 'Data not found',
    ALREADY_SOLD: 'The vehicle is already marked as sold',
    INCORRECT_DATA_REQUEST: 'An error occurred while processing your request',
    DEVICE_ALREADY_EXISTS_IN_FAMILY:
      'This device already exists in your family',
  },
  errorTypes: {
    OAUTH_EXCEPTION: 'OAuthException',
    ACCESS_DENIED_EXCEPTION: 'AccessDeniedException',
    ALREADY_AUTHENTICATED: 'AlreadyAuthenticated',
    UNAUTHORIZED_ACCESS: 'UnauthorizedAccess',
    FORBIDDEN: 'Forbidden',
    INPUT_VALIDATION: 'InputValidationException',
    ACCOUNT_ALREADY_EXIST: 'AccountAlreadyExistException',
    ACCOUNT_DOES_NOT_EXIST: 'AccountDoesNotExistException',
    ENTITY_NOT_FOUND: 'EntityNotFound',
    ACCOUNT_BLOCKED: 'AccountBlocked',
    ACCOUNT_DEACTIVATED: 'AccountDeactivated',
    CONTENT_BLOCKED: 'ContentBlocked',
    CONTENT_REMOVED: 'ContentRemoved',
    PRIVATE_CONTENT: 'PrivateContent',
    PRIVATE_ACCOUNT: 'PrivateAccount',
    DUPLICATE_REQUEST: 'DuplicateRequest',
    EMAIL_NOT_VERIFIED: 'emailNotVerified',
    MOBILE_NUMBER_NOT_VERIFIED: 'mobileNumberNotVerified',
    INTERNAL_SERVER_ERROR: 'InternalServerError',
    CATCH_ERRORS: 'Oops! something went wrong.',
  },
  successMessage:{
    ADD_SUCCESS_MESSAGE: (data) => `The ${data} has been added successfully`,
    UPDATE_SUCCESS_MESSAGE: (data) => `The ${data} has been updated successfully`,
    DELETE_SUCCESS_MESSAGE: (data) => `The ${data} has been deleted successfully`,
    GET_SUCCESS_MESSAGE: (data) => `The ${data} has been fetched successfully`,
  }
};

module.exports = options;
